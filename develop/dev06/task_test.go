package main

import (
	"strings"
	"testing"
)

func TestCut(t *testing.T) {
	testCase := []struct {
		nametest     string
		config       ConfCut
		input        string
		output       string
		iserror      bool
		messageerror string
	}{
		{`echo "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон" | cut -d ',' -f 1`,
			ConfCut{filed: "1", delimiter: ","}, "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон",
			"яблоко\nлимон\nарка яма лимон\n", false, ""},
		{`echo "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон" | cut -d  ',' -f 1-3`,
			ConfCut{filed: "1-3", delimiter: ","}, "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон",
			"яблоко,банан,апельсин\nлимон,виноград,ананас\nарка яма лимон\n", false, ""},
		{`echo "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон" | cut -d  ',' -f 1, 3`,
			ConfCut{filed: "1,3", delimiter: ","}, "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон",
			"яблоко,апельсин\nлимон,ананас\nарка яма лимон\n", false, ""},
		{`echo "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон" | cut -d  ',' -f -2,4`,
			ConfCut{filed: "-2,4", delimiter: ","}, "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон",
			"яблоко,банан,груша\nлимон,виноград,киви\nарка яма лимон\n", false, ""},
		{`echo "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон" | cut -d  ',' -f 1,3-4`,
			ConfCut{filed: "1,3-4", delimiter: ","}, "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон",
			"яблоко,апельсин,груша\nлимон,ананас,киви\nарка яма лимон\n", false, ""},
		{`echo "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон" | cut -d  ',' -s -f 1`,
			ConfCut{filed: "1", delimiter: ",", isseparated: true}, "яблоко,банан,апельсин,груша,малина\nлимон,виноград,ананас,киви,клубника\nарка яма лимон",
			"яблоко\nлимон\n", false, ""},
	}
	for _, testcase := range testCase {
		t.Run(testcase.nametest, func(t *testing.T) {
			ans, err := testcase.config.Cut(strings.Split(testcase.input, "\n"))
			if testcase.iserror {
				if err.Error() != testcase.messageerror {
					t.Errorf("Должна была быть выброшена ошибка %v но была выброшена ошибка %v", testcase.messageerror, err.Error())
				}
			} else {
				if err != nil {
					t.Errorf("Не должно было быть ошибки, но брошена ошибка %v", err.Error())
				}
				if ans != testcase.output {
					t.Errorf("должен быть результат\n%v имеется результат\n%v", testcase.output, ans)
				}
			}
		})
	}

}
